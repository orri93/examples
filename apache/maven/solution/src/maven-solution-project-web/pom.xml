<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
  <modelVersion>4.0.0</modelVersion>
  
	<!--The identifier of the parent POM -->
  <parent>
    <groupId>gos.example.maven</groupId>
    <artifactId>example.solution</artifactId>
    <version>0.0.1</version>
    <relativePath>../../pom.xml</relativePath>
  </parent>

  <artifactId>example.project.web</artifactId>
  <packaging>war</packaging>
  <name>maven-solution-project-web Maven Webapp</name>
	<url>${fds.url}</url>

  <dependencies>

    <!-- Solution -->
    <dependency>
      <groupId>${project.parent.group}</groupId>
      <artifactId>example.project.camel</artifactId>
    </dependency>
    
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-core</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
    </dependency>
    
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
    </dependency>
    
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-spring-javaconfig</artifactId>
    </dependency>

     <!-- logging , spring 5 no more bridge, thanks spring-jcl -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
    </dependency>

    <!-- junit 5, unit test -->
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- unit test -->
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Some containers like Tomcat don't have jstl library -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
      <scope>provided</scope>
    </dependency>
    
  </dependencies>

  <build>
    <finalName>example.project.web-${fds.solution.version}-${release-tag}</finalName>
    <plugins>
   
      <!-- Step 1. - Download Swagger UI project from GitHub -->
      <!-- plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>wagon-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>download-single</goal>
            </goals>
            <configuration>
              <url>${swagger.url}</url>
              <fromFile>v${swagger-ui.version}.tar.gz</fromFile>
              <toFile>${project.build.directory}/swagger-ui-${swagger-ui.version}.tar.gz</toFile>
            </configuration>
          </execution>
        </executions>
      </plugin -->

      <!-- Step 2. - Decompress content and move it to target/swagger-ui folder -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <echo message="Decompress archive" />
                <!-- gunzip
                  src="${project.build.directory}/swagger-ui-${swagger-ui.version}.tar.gz" />
                <untar
                  src="${project.build.directory}/swagger-ui-${swagger-ui.version}.tar"
                  dest="${project.build.directory}" />  -->
                <echo message="copy resources" />
                <copy todir="${destDir}" overwrite="yes">
                  <fileset
                    dir="${project.basedir}/sub/swagger-ui-orri-fork/dist" />
                  <!-- fileset
                    dir="${project.build.directory}/swagger-ui-${swagger-ui.version}/dist" /> -->
                </copy>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Step 3. Copy Web Resources to target/classes but also to target/swagger-ui -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-swagger-ui</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/swagger-ui/</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/sub/swagger-ui-orri-fork/dist</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-resources</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/webapp</directory>
                  <filtering>false</filtering>
                </resource>
                <!-- Copy swagger-ui resources to classes directory to be able to 
                  use it with mvn jetty:run -->
                <resource>
                  <directory>${destDir}</directory>
                  <filtering>false</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Step 4. Add Swagger-ui Resources to the WAR -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <webResources>
            <resource>
              <directory>target/swagger-ui/</directory>
              <includes>
                <include>**/*.*</include>
              </includes>
            </resource>
          </webResources>
          <warName>providerservice</warName>
        </configuration>
      </plugin>

      <!-- Allows the example to be run via 'mvn compile exec:java' -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <configuration>
          <mainClass>gos.example.camel.CamelDevelopment</mainClass>
          <includePluginDependencies>false</includePluginDependencies>
        </configuration>
      </plugin>
      
      <!-- allows running this example with mvn:jetty-run -->
      <plugin>
        <groupId>org.eclipse.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <configuration>
          <webApp>
            <!-- contextPath>/${project.artifactId}</contextPath -->
            <contextPath>/</contextPath>
          </webApp>
          <webAppSourceDirectory>target/classes</webAppSourceDirectory>
        </configuration>
      </plugin> 
   
    </plugins>
  </build>
</project>
